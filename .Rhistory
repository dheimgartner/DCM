alpha <- 2
rho <- rho
a1 <- 0.5
a2 <- 1.5
ground_truth <- c(gamma = gamma, alpha = alpha, rho = rho, a1 = a1, a2 = a2)
# Errors
set.seed(0)
errors <- rmvnorm(n, c(0, 0), sigma = matrix(c(1, rho, rho, 1), 2, 2))
epsilon <- errors[, 1]
eta <- errors[, 2]
# Data generating process
X <- rnorm(n)
t_star <- gamma * X + epsilon
t <- t_star > 0
Z <- runif(n)
N_star <- alpha * Z + eta
N <- cut(N_star, breaks = c(-Inf, a1, a2, Inf))
levels(N) <- c(1, 2, 3)
N <- as.numeric(as.character(N))
N <- N * t
# Model frame
dat <- data.frame(
X = X,
Z = Z,
t = as.numeric(t),
N = N
)
out$ground_truth <- ground_truth
out$errors <- errors
out$data <- dat
return(out)
}
sim_dat <- simulate_data(rho = 0, n = n)
sim_dat$ground_truth
dat <- sim_dat$data
plot(sim_dat$errors, col = ifelse(dat$t, "black", "grey"),
xlab = "epsilon",
ylab = "eta")
table(dat$t)
table(dat$N)
head(dat)
fit <- stats::glm(t ~ X, data = dat, family = binomial(link = "probit"))
summary(fit)
dat_ <- dat[dat$t == 1, ]
dat_$N <- factor(dat_$N)
fit <- MASS::polr(N ~ Z, data = dat_, method = "probit")
summary(fit)
sim_dat_ <- simulate_data(rho = 0.8, n = n)
sim_dat_$ground_truth
dat <- sim_dat_$data
plot(sim_dat_$errors, col = ifelse(dat$t, "black", "grey"),
xlab = "epsilon",
ylab = "eta")
fit <- stats::glm(t ~ X, data = dat, family = binomial(link = "probit"))
summary(fit)
dat_ <- dat[dat$t == 1, ]
dat_$N <- factor(dat_$N)
fit <- MASS::polr(N ~ Z, data = dat_, method = "probit")
summary(fit)
sim_dat$ground_truth
dat <- sim_dat$data
dat_ <- dat[dat$t == 1, ]
n_ <- nrow(dat_)
loglik <- function(param) {
gamma <- param["gamma"]
gammaX <- gamma * dat$X
p1 <- pnorm(gammaX)
p0 <- 1 - p1
ll <- sum((1 - dat$t) * log(p0) + dat$t * log(p1))
# cat(ll, "\n")
ll
}
m <- maxLik::maxLik(loglik, start = c(gamma = 0))
summary(m)
loglik <- function(param) {
alpha <- param["alpha"]
a1 <- param["a1"]
a2 <- param["a2"]
alphaZ <- alpha * dat_$Z
# could be done outside once and for all...
I1 <- as.numeric(dat_$N == 1)
I2 <- as.numeric(dat_$N == 2)
I3 <- as.numeric(dat_$N == 3)
p1 <- pnorm(a1 - alphaZ)
p2 <- pnorm(a2 - alphaZ) - pnorm(a1 - alphaZ)
p3 <- 1 - pnorm(a2 - alphaZ)
ll <- sum(I1 * log(p1), I2 * log(p2), I3 * log(p3))
# cat(ll, "\n")
ll
}
m <- maxLik::maxLik(loglik, start = c(alpha =01, a1 = -1, a2 = 1))
summary(m)
sim_dat_$ground_truth
dat <- sim_dat_$data
# Compute once and for all itters
I1 <- as.numeric(dat$N == 1)
I2 <- as.numeric(dat$N == 2)
I3 <- as.numeric(dat$N == 3)
loglik <- function(param) {
alpha <- param["alpha"]
gamma <- param["gamma"]
rho <- param["rho"]
a1 <- param["a1"]
a2 <- param["a2"]
gammaX <- gamma * dat$X
alphaZ <- alpha * dat$Z
sigma <- matrix(c(1, -rho, -rho, 1), 2, 2)
n_p_inf <- rep(Inf, n)
pt0 <- 1 - pnorm(gammaX)
a1 <- pmnorm(cbind(gammaX, a1 - alphaZ), varcov = sigma)
a2 <- pmnorm(cbind(gammaX, a2 - alphaZ), varcov = sigma)
pt1_j1 <- a1 # below
pt1_j2 <- a2 - a1 # between
pt1_j3 <- pmnorm(cbind(gammaX, n_p_inf), varcov = sigma) - a2 # above
selection <- (1 - dat$t) * log(pt0)
observation <- dat$t * (I1 * log(pt1_j1) + I2 * log(pt1_j2) + I3 * log(pt1_j3))
ll <- sum(selection + observation)
cat(ll, "\n")
ll
}
loglik(param = sim_dat$ground_truth)
m <- maxLik::maxLik(loglik, start = c(gamma = 1, alpha = 1, rho = 0, a1 = -1, a2 = 1))
loglik(param = sim_dat$ground_truth)
sim_dat_$ground_truth
dat <- sim_dat_$data
# Compute once and for all itters
I1 <- as.numeric(dat$N == 1)
I2 <- as.numeric(dat$N == 2)
I3 <- as.numeric(dat$N == 3)
loglik <- function(param) {
alpha <- param["alpha"]
gamma <- param["gamma"]
rho <- param["rho"]
a1 <- param["a1"]
a2 <- param["a2"]
gammaX <- gamma * dat$X
alphaZ <- alpha * dat$Z
sigma <- matrix(c(1, -rho, -rho, 1), 2, 2)
n_p_inf <- rep(Inf, n)
pt0 <- 1 - pnorm(gammaX)
a1 <- pmnorm(cbind(gammaX, a1 - alphaZ), varcov = sigma)
a2 <- pmnorm(cbind(gammaX, a2 - alphaZ), varcov = sigma)
pt1_j1 <- a1 # below
pt1_j2 <- a2 - a1 # between
pt1_j3 <- pmnorm(cbind(gammaX, n_p_inf), varcov = sigma) - a2 # above
selection <- (1 - dat$t) * log(pt0)
observation <- dat$t * (I1 * log(pt1_j1) + I2 * log(pt1_j2) + I3 * log(pt1_j3))
ll <- sum(selection + observation)
cat(ll, "\n")
ll
}
loglik(param = sim_dat_$ground_truth)
m <- maxLik::maxLik(loglik, start = c(gamma = 1, alpha = 1, rho = 0, a1 = -1, a2 = 1))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(mvtnorm)
library(mnormt)
n <- 10e3
simulate_data <- function(rho, n) {
out <- list()
# Parameters
n <- n
gamma <- 1.5
alpha <- 2
rho <- rho
a1 <- 0.5
a2 <- 1.5
ground_truth <- c(gamma = gamma, alpha = alpha, rho = rho, a1 = a1, a2 = a2)
# Errors
set.seed(0)
errors <- rmvnorm(n, c(0, 0), sigma = matrix(c(1, rho, rho, 1), 2, 2))
epsilon <- errors[, 1]
eta <- errors[, 2]
# Data generating process
X <- runif(n)
t_star <- gamma * X + epsilon
t <- t_star > 0
Z <- runif(n)
N_star <- alpha * Z + eta
N <- cut(N_star, breaks = c(-Inf, a1, a2, Inf))
levels(N) <- c(1, 2, 3)
N <- as.numeric(as.character(N))
N <- N * t
# Model frame
dat <- data.frame(
X = X,
Z = Z,
t = as.numeric(t),
N = N
)
out$ground_truth <- ground_truth
out$errors <- errors
out$data <- dat
return(out)
}
sim_dat <- simulate_data(rho = 0, n = n)
sim_dat$ground_truth
dat <- sim_dat$data
plot(sim_dat$errors, col = ifelse(dat$t, "black", "grey"),
xlab = "epsilon",
ylab = "eta")
table(dat$t)
table(dat$N)
head(dat)
fit <- stats::glm(t ~ X, data = dat, family = binomial(link = "probit"))
summary(fit)
dat_ <- dat[dat$t == 1, ]
dat_$N <- factor(dat_$N)
fit <- MASS::polr(N ~ Z, data = dat_, method = "probit")
summary(fit)
sim_dat_ <- simulate_data(rho = 0.6, n = n)
sim_dat_$ground_truth
dat <- sim_dat_$data
plot(sim_dat_$errors, col = ifelse(dat$t, "black", "grey"),
xlab = "epsilon",
ylab = "eta")
fit <- stats::glm(t ~ X, data = dat, family = binomial(link = "probit"))
summary(fit)
dat_ <- dat[dat$t == 1, ]
dat_$N <- factor(dat_$N)
fit <- MASS::polr(N ~ Z, data = dat_, method = "probit")
summary(fit)
sim_dat$ground_truth
dat <- sim_dat$data
dat_ <- dat[dat$t == 1, ]
n_ <- nrow(dat_)
loglik <- function(param) {
gamma <- param["gamma"]
gammaX <- gamma * dat$X
p1 <- pnorm(gammaX)
p0 <- 1 - p1
ll <- sum((1 - dat$t) * log(p0) + dat$t * log(p1))
# cat(ll, "\n")
ll
}
m <- maxLik::maxLik(loglik, start = c(gamma = 0))
summary(m)
loglik <- function(param) {
alpha <- param["alpha"]
a1 <- param["a1"]
a2 <- param["a2"]
alphaZ <- alpha * dat_$Z
# could be done outside once and for all...
I1 <- as.numeric(dat_$N == 1)
I2 <- as.numeric(dat_$N == 2)
I3 <- as.numeric(dat_$N == 3)
p1 <- pnorm(a1 - alphaZ)
p2 <- pnorm(a2 - alphaZ) - pnorm(a1 - alphaZ)
p3 <- 1 - pnorm(a2 - alphaZ)
ll <- sum(I1 * log(p1), I2 * log(p2), I3 * log(p3))
# cat(ll, "\n")
ll
}
m <- maxLik::maxLik(loglik, start = c(alpha =01, a1 = -1, a2 = 1))
summary(m)
sim_dat_$ground_truth
dat <- sim_dat_$data
# Compute once and for all itters
I1 <- as.numeric(dat$N == 1)
I2 <- as.numeric(dat$N == 2)
I3 <- as.numeric(dat$N == 3)
loglik <- function(param) {
alpha <- param["alpha"]
gamma <- param["gamma"]
rho <- param["rho"]
a1 <- param["a1"]
a2 <- param["a2"]
gammaX <- gamma * dat$X
alphaZ <- alpha * dat$Z
sigma <- matrix(c(1, -rho, -rho, 1), 2, 2)
n_p_inf <- rep(Inf, n)
pt0 <- 1 - pnorm(gammaX)
a1 <- pmnorm(cbind(gammaX, a1 - alphaZ), varcov = sigma)
a2 <- pmnorm(cbind(gammaX, a2 - alphaZ), varcov = sigma)
pt1_j1 <- a1 # below
pt1_j2 <- a2 - a1 # between
pt1_j3 <- pmnorm(cbind(gammaX, n_p_inf), varcov = sigma) - a2 # above
selection <- (1 - dat$t) * log(pt0)
observation <- dat$t * (I1 * log(pt1_j1) + I2 * log(pt1_j2) + I3 * log(pt1_j3))
ll <- sum(selection + observation)
cat(ll, "\n")
ll
}
loglik(param = sim_dat_$ground_truth)
m <- maxLik::maxLik(loglik, start = c(gamma = 1, alpha = 1, rho = 0, a1 = -1, a2 = 1))
summary(m)
browseVignettes("maxLik")
library(Rcpp)
help(package = "Rcpp")
remotes::install_github("RBigData/remoter")
usethis::use_vignette("panel_prod")
devtools::build_rmd("vignettes/panel_prod.Rmd")
### Clear memory
rm(list = ls())
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_SP",
modelDescr      = "Simple MNL model on mode choice SP data",
indivID         = "ID",
outputDirectory = "bla"
)
### Loading data from package
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = apollo_modeChoiceData
### Use only SP data
database = subset(database,database$SP==1)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_car      = 0,
asc_bus      = 0,
asc_air      = 0,
asc_rail     = 0,
b_tt_car     = 0,
b_tt_bus     = 0,
b_tt_air     = 0,
b_tt_rail    = 0,
b_access     = 0,
b_cost       = 0,
b_no_frills  = 0,
b_wifi       = 0,
b_food       = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_car","b_no_frills")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air    + b_no_frills * ( service_air == 1 )  + b_wifi * ( service_air == 2 )  + b_food * ( service_air == 3 )
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail   + b_no_frills * ( service_rail == 1 ) + b_wifi * ( service_rail == 2 ) + b_food * ( service_rail == 3 )
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
model_1 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
P = list()
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air    + b_no_frills * ( service_air == 1 )  + b_wifi * ( service_air == 2 )  + b_food * ( service_air == 3 )
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail   + b_no_frills * ( service_rail == 1 ) + b_wifi * ( service_rail == 2 ) + b_food * ( service_rail == 3 )
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
P[["model"]] = apollo_mnl(mnl_settings, functionality)
# P = apollo_panelProd(P, apollo_inputs, functionality)
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model_2 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
database = apollo_modeChoiceData
database = subset(database,database$SP==1)
database
database$ID <- 1:nrow(database)
model_2 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_inputs = apollo_validateInputs()
model_2 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model_1)
apollo_modelOutput(model_2)
out_1 <- apollo_probabilities(apollo_beta, apollo_inputs)
apollo_initialise()
apollo_control = list(
modelName       = "MNL_SP",
modelDescr      = "Simple MNL model on mode choice SP data",
indivID         = "ID",
outputDirectory = "bla"
)
database = apollo_modeChoiceData
database = subset(database,database$SP==1)
apollo_beta=c(asc_car      = 0,
asc_bus      = 0,
asc_air      = 0,
asc_rail     = 0,
b_tt_car     = 0,
b_tt_bus     = 0,
b_tt_air     = 0,
b_tt_rail    = 0,
b_access     = 0,
b_cost       = 0,
b_no_frills  = 0,
b_wifi       = 0,
b_food       = 0)
apollo_fixed = c("asc_car","b_no_frills")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
P = list()
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air    + b_no_frills * ( service_air == 1 )  + b_wifi * ( service_air == 2 )  + b_food * ( service_air == 3 )
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail   + b_no_frills * ( service_rail == 1 ) + b_wifi * ( service_rail == 2 ) + b_food * ( service_rail == 3 )
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
P[["model"]] = apollo_mnl(mnl_settings, functionality)
P = apollo_panelProd(P, apollo_inputs, functionality)
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
out_1 <- apollo_probabilities(apollo_beta, apollo_inputs)
model_2 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model_1)
apollo_initialise()
apollo_control = list(
modelName       = "MNL_SP",
modelDescr      = "Simple MNL model on mode choice SP data",
indivID         = "ID",
outputDirectory = "bla"
)
database = apollo_modeChoiceData
database = subset(database,database$SP==1)
apollo_beta=c(asc_car      = 0,
asc_bus      = 0,
asc_air      = 0,
asc_rail     = 0,
b_tt_car     = 0,
b_tt_bus     = 0,
b_tt_air     = 0,
b_tt_rail    = 0,
b_access     = 0,
b_cost       = 0,
b_no_frills  = 0,
b_wifi       = 0,
b_food       = 0)
apollo_fixed = c("asc_car","b_no_frills")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
P = list()
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air    + b_no_frills * ( service_air == 1 )  + b_wifi * ( service_air == 2 )  + b_food * ( service_air == 3 )
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail   + b_no_frills * ( service_rail == 1 ) + b_wifi * ( service_rail == 2 ) + b_food * ( service_rail == 3 )
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
P[["model"]] = apollo_mnl(mnl_settings, functionality)
P = apollo_panelProd(P, apollo_inputs, functionality)
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
out_1 <- apollo_probabilities(apollo_beta, apollo_inputs)
model_1 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
P = list()
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air    + b_no_frills * ( service_air == 1 )  + b_wifi * ( service_air == 2 )  + b_food * ( service_air == 3 )
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail   + b_no_frills * ( service_rail == 1 ) + b_wifi * ( service_rail == 2 ) + b_food * ( service_rail == 3 )
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
P[["model"]] = apollo_mnl(mnl_settings, functionality)
# P = apollo_panelProd(P, apollo_inputs, functionality)
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
database$ID <- 1:nrow(database)
apollo_inputs = apollo_validateInputs()
out_2 <- apollo_probabilities(apollo_beta, apollo_inputs)
model_2 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model_1)
apollo_modelOutput(model_2)
devtools::build_rmd("vignettes/panel_prod.Rmd")
