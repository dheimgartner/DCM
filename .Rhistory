levels(choices) <- 1:(length(taus) + 1)
choices <- as.numeric(as.character(choices))
dat <- data.frame(
X, choices
)
dat
}
#'
#' @return
#' @export
#'
#' @examples
#' n <- 10e3
#' X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
#' betas <- c(beta1 = 1, beta2 = 2)
#' taus <- c(tau1 = -1, tau2 = 1) # will generate 3 choices
#' simulate_ol(X, betas, taus, n)
simulate_ol <- function(X, betas, taus, n = 10e3) {
if (!is.matrix(X)) {
X <- as.matrix(X)
}
error <- rlogis(N)
utility <- X %*% betas + error
choices <- cut(utility, breaks = c(-Inf, taus, Inf))
levels(choices) <- 1:(length(taus) + 1)
choices <- as.numeric(as.character(choices))
dat <- data.frame(
X, choices
)
dat
}
n <- 10e3
X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
betas <- c(beta1 = 1, beta2 = 2)
taus <- c(tau1 = -1, tau2 = 1) # will generate 3 choices
simulate_ol(X, betas, taus, n)
n = 10e3
lv = rnorm(n)
taus = c(tau1 = -1, tau2 = 1)
zetas = c(zeta = 1)
lv
taus
zetas
zetas = c(zeta1 = 1, zeta2 = 2)
zetas * lv
zetas
# measurement: I = zeta * lv + xi where xi ~ rlogis
measurements <- zetas %*% lv + rlogis(n)
zetas
lv
dim(lv)
matrix(lv) -> l
# measurement: I = zeta * lv + xi where xi ~ rlogis
measurements <- zetas %*% l + rlogis(n)
zetas
l %*% zetas
lv %*% zetas
# measurement: I = zeta * lv + xi where xi ~ rlogis
measurements <- zetas %*% lv + rlogis(n)
if (is.matrix(lv)) {
lv <- as.matrix(lv)
}
# measurement: I = zeta * lv + xi where xi ~ rlogis
measurements <- zetas %*% lv + rlogis(n)
# measurement: I = zeta * lv + xi where xi ~ rlogis
measurements <- lv %*% zetas + rlogis(n)
lv %*% zetas
l %*% zetas
l
lv
lv = rnorm(n)
if (is.matrix(lv)) {
lv <- as.matrix(lv)
}
l %*% zetas
zetas
lv %*% zetas
dim(l)
dim(lv)
lv <- as.matrix(lv)
lv
dim(lv)
# measurement: I = zeta * lv + xi where xi ~ rlogis
measurements <- lv %*% zetas + rlogis(n)
measurement <- cut(measurements, breaks = c(-Inf, taus, Inf))
measurement
dim(measurement)
dim(measurements)
# measurement: I = zeta * lv + xi where xi ~ rlogis
measurements <- lv %*% zetas + rlogis(n)
measurements <- apply(measurements, 2, function(x) cut(x, breaks = c(-Inf, taus, Inf)))
measurements
# measurement: I = zeta * lv + xi where xi ~ rlogis
measurements <- lv %*% zetas + rlogis(n)
measurements <- apply(measurements, 2, function(x) {
y <- cut(x, breaks = c(-Inf, taus, Inf))
levels(y) <- 1:(length(taus) + 1)
as.numeric(as.character(y))
})
measurements
simulate_lv <- function(X, betas, taus, zetas, n = 10e3) {
lv <- simulate_structural(X = X, betas = betas, n = n)
mm <- simulate_measurements(lv = lv, taus = taus, zetas = zetas, n = n)
dat <- data.frame(
X, mm
)
dat
}
simulate_structural <- function(X, betas, n = 10e3) {
if (is.matrix(X)) {
X <- as.matrix(X)
}
lv <- X %*% betas + rnorm(n)
lv
}
simulate_measurements <- function(lv, taus = c(tau1 = -1, tau2 = 1), zetas = c(zeta = 1), n = 10e3) {
if (is.matrix(lv)) {
lv <- as.matrix(lv)
}
measurements <- lv %*% zetas + rlogis(n)
measurements <- apply(measurements, 2, function(x) {
y <- cut(x, breaks = c(-Inf, taus, Inf))
levels(y) <- 1:(length(taus) + 1)
as.numeric(as.character(y))
})
measurements
}
n <- 10e3
n <- 10e3
X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
betas <- c(beta1 = 1, beta2 = 2)
taus <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta = 1)
simulate_lv(X, betas, taus, zetas, n)
debugonce(simulate_lv)
simulate_lv(X, betas, taus, zetas, n)
debugonce(simulate_lv)
simulate_lv(X, betas, taus, zetas, n)
X
is.matrix(X)
as.matrix(X)
as.matrix(X) -> terst
is.matrix(terst)
#' @return
#' @export
#'
#' @examples
#' n <- 10e3
#' X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
#' betas <- c(beta1 = 1, beta2 = 2)
#' taus <- c(tau1 = -1, tau2 = 1)
#' zetas <- c(zeta = 1)
#' simulate_lv(X, betas, taus, zetas, n)
simulate_lv <- function(X, betas, taus, zetas, n = 10e3) {
lv <- simulate_structural(X = X, betas = betas, n = n)
mm <- simulate_measurements(lv = lv, taus = taus, zetas = zetas, n = n)
dat <- data.frame(
X, mm
)
dat
}
simulate_structural <- function(X, betas, n = 10e3) {
if (!is.matrix(X)) {
X <- as.matrix(X)
}
lv <- X %*% betas + rnorm(n)
lv
}
simulate_measurements <- function(lv, taus, zetas, n) {
if (!is.matrix(lv)) {
lv <- as.matrix(lv)
}
measurements <- lv %*% zetas + rlogis(n)
measurements <- apply(measurements, 2, function(x) {
y <- cut(x, breaks = c(-Inf, taus, Inf))
levels(y) <- 1:(length(taus) + 1)
as.numeric(as.character(y))
})
measurements
}
n <- 10e3
X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
betas <- c(beta1 = 1, beta2 = 2)
taus <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta = 1)
simulate_lv(X, betas, taus, zetas, n)
#' @return
#' @export
#'
#' @examples
#' n <- 10e3
#' X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
#' betas <- c(beta1 = 1, beta2 = 2)
#' taus <- c(tau1 = -1, tau2 = 1)
#' zetas <- c(zeta = 1)
#' simulate_lv(X, betas, taus, zetas, n)
simulate_lv <- function(X, betas, taus, zetas, n = 10e3) {
lv <- simulate_structural(X = X, betas = betas, n = n)
measurement <- simulate_measurements(lv = lv, taus = taus, zetas = zetas, n = n)
dat <- data.frame(
X, measurement
)
dat
}
simulate_structural <- function(X, betas, n = 10e3) {
if (!is.matrix(X)) {
X <- as.matrix(X)
}
lv <- X %*% betas + rnorm(n)
lv
}
simulate_measurements <- function(lv, taus, zetas, n) {
if (!is.matrix(lv)) {
lv <- as.matrix(lv)
}
measurements <- lv %*% zetas + rlogis(n)
measurements <- apply(measurements, 2, function(x) {
y <- cut(x, breaks = c(-Inf, taus, Inf))
levels(y) <- 1:(length(taus) + 1)
as.numeric(as.character(y))
})
measurements
}
n <- 10e3
X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
betas <- c(beta1 = 1, beta2 = 2)
taus <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta1 = 1, zeta2 = 2)
simulate_lv(X, betas, taus, zetas, n)
#' @return
#' @export
#'
#' @examples
#' n <- 10e3
#' X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
#' betas <- c(beta1 = 1, beta2 = 2)
#' taus <- c(tau1 = -1, tau2 = 1)
#' zetas <- c(zeta = 1)
#' simulate_lv(X, betas, taus, zetas, n)
simulate_lv <- function(X, betas, taus, zetas, n = 10e3) {
lv <- simulate_structural(X = X, betas = betas, n = n)
mm <- simulate_measurements(lv = lv, taus = taus, zetas = zetas, n = n)
dat <- data.frame(
X, mm
)
dat
}
debugonce(simulate_lv)
simulate_lv(X, betas, taus, zetas, n)
lv
mm
names(mm)
colnames(mm)
head(mm)
dat
#' @return
#' @export
#'
#' @examples
#' n <- 10e3
#' X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
#' betas <- c(beta1 = 1, beta2 = 2)
#' taus <- c(tau1 = -1, tau2 = 1)
#' zetas <- c(zeta = 1)
#' simulate_lv(X, betas, taus, zetas, n)
simulate_lv <- function(X, betas, taus, zetas, n = 10e3) {
lv <- simulate_structural(X = X, betas = betas, n = n)
mm <- simulate_measurements(lv = lv, taus = taus, zetas = zetas, n = n)
dat <- data.frame(
X, mm
)
dat
}
simulate_structural <- function(X, betas, n = 10e3) {
if (!is.matrix(X)) {
X <- as.matrix(X)
}
lv <- X %*% betas + rnorm(n)
lv
}
simulate_measurements <- function(lv, taus, zetas, n) {
if (!is.matrix(lv)) {
lv <- as.matrix(lv)
}
measurements <- lv %*% zetas + rlogis(n)
measurements <- apply(measurements, 2, function(x) {
y <- cut(x, breaks = c(-Inf, taus, Inf))
levels(y) <- 1:(length(taus) + 1)
as.numeric(as.character(y))
})
nc <- ncol(measurements)
colnames(measurements) <- paste0("ind", nc)
measurements
}
n <- 10e3
X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
betas <- c(beta1 = 1, beta2 = 2)
taus <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta1 = 1, zeta2 = 2)
simulate_lv(X, betas, taus, zetas, n)
debugonce(simulate_lv)
simulate_lv(X, betas, taus, zetas, n)
paste0("ind", nc)
nc
#' @return
#' @export
#'
#' @examples
#' n <- 10e3
#' X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
#' betas <- c(beta1 = 1, beta2 = 2)
#' taus <- c(tau1 = -1, tau2 = 1)
#' zetas <- c(zeta = 1)
#' simulate_lv(X, betas, taus, zetas, n)
simulate_lv <- function(X, betas, taus, zetas, n = 10e3) {
lv <- simulate_structural(X = X, betas = betas, n = n)
mm <- simulate_measurements(lv = lv, taus = taus, zetas = zetas, n = n)
dat <- data.frame(
X, mm
)
dat
}
simulate_structural <- function(X, betas, n = 10e3) {
if (!is.matrix(X)) {
X <- as.matrix(X)
}
lv <- X %*% betas + rnorm(n)
lv
}
simulate_measurements <- function(lv, taus, zetas, n) {
if (!is.matrix(lv)) {
lv <- as.matrix(lv)
}
measurements <- lv %*% zetas + rlogis(n)
measurements <- apply(measurements, 2, function(x) {
y <- cut(x, breaks = c(-Inf, taus, Inf))
levels(y) <- 1:(length(taus) + 1)
as.numeric(as.character(y))
})
colnames(measurements) <- paste0("ind", 1:ncol(measurements))
measurements
}
n <- 10e3
X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
betas <- c(beta1 = 1, beta2 = 2)
taus <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta1 = 1, zeta2 = 2)
simulate_lv(X, betas, taus, zetas, n)
#' @return
#' @export
#'
#' @examples
#' n <- 10e3
#' X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
#' betas <- c(beta1 = 1, beta2 = 2)
#' taus <- c(tau1 = -1, tau2 = 1)
#' zetas <- c(zeta1 = 1, zeta2 = 2)
#' simulate_lv(X, betas, taus, zetas, n)
simulate_lv <- function(X, betas, taus, zetas, n = 10e3) {
out <- list()
lv <- simulate_structural(X = X, betas = betas, n = n)
mm <- simulate_measurements(lv = lv, taus = taus, zetas = zetas, n = n)
dat <- data.frame(
X, mm
)
out$lv <- lv
out$observed <- dat
out
}
simulate_structural <- function(X, betas, n = 10e3) {
if (!is.matrix(X)) {
X <- as.matrix(X)
}
lv <- X %*% betas + rnorm(n)
lv
}
simulate_measurements <- function(lv, taus, zetas, n) {
if (!is.matrix(lv)) {
lv <- as.matrix(lv)
}
measurements <- lv %*% zetas + rlogis(n)
measurements <- apply(measurements, 2, function(x) {
y <- cut(x, breaks = c(-Inf, taus, Inf))
levels(y) <- 1:(length(taus) + 1)
as.numeric(as.character(y))
})
colnames(measurements) <- paste0("ind", 1:ncol(measurements))
measurements
}
library(DCM)
n <- 10e3
X_lv <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
betas_lv <- c(beta1 = 1, beta2 = 2)
taus_lv <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta1 = 1, zeta2 = 2)
simulate_lv(X_lv, betas_lv, taus_lv, zetas, n)
sim_dat_lv <- simulate_lv(X_lv, betas_lv, taus_lv, zetas, n)
names(sim_dat_lv)
sim_dat$lv
sim_dat_lv$lv
rm(list = ls())
devtools::load_all()
N <- 10e3
library(DCM)
N <- 10e3
# Simulate LV
X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
# Simulate LV
X <- data.frame(x1 = rnorm(n), x2 = rnorm(n))
# Simulate LV
X <- data.frame(x1 = rnorm(N), x2 = rnorm(N))
betas_lv <- c(beta1 = 1, beta2 = 2)
taus_lv <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta1 = 1, zeta2 = 2)
sim_dat_lv <- DCM::simulate_lv(X, betas_lv, taus_lv, zetas, N)
devtools::load_all()
devtools::document()
sim_dat_lv <- DCM::simulate_lv(X, betas_lv, taus_lv, zetas, N)
devtools::load_all()
sim_dat_lv <- DCM::simulate_lv(X, betas_lv, taus_lv, zetas, N)
lv <- sim_dat_lv$latent
obs <- sim_dat_lv$observed
# Pass and simulate OL data
X <- data.frame(x1 = rnorm(N), x2 = lv)
lv
sim_dat_lv <- DCM::simulate_lv(X, betas_lv, taus_lv, zetas, N)
sim_dat_lv$lv
devtools::load_all()
# Simulate LV
X <- data.frame(x1 = rnorm(N), x2 = rnorm(N))
betas_lv <- c(beta1 = 1, beta2 = 2)
taus_lv <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta1 = 1, zeta2 = 2)
sim_dat_lv <- DCM::simulate_lv(X, betas_lv, taus_lv, zetas, N)
lv <- sim_dat_lv$lv
obs <- sim_dat_lv$obs
# Pass and simulate OL data
X <- data.frame(x1 = rnorm(N), x2 = lv)
betas <- c(beta1 = 1, beta2 = 2)
taus <- c(tau1 = -1, tau2 = 1) # will generate 3 choices
sim_dat_ol <- simulate_ol(X, betas, taus, n)
sim_dat_ol
# What we actually observe
X <- data.frame(
obs,
sim_dat_ol[, names(sim_dat_ol) != "x2"] # x2 is our lv -> we only observe obs
)
X
# Simulate LV
X <- data.frame(x1 = rnorm(N), x2 = rnorm(N))
betas_lv <- c(beta1 = 1, beta2 = 2)
taus_lv <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta1 = 1, zeta2 = 2)
sim_dat_lv <- DCM::simulate_lv(X, betas_lv, taus_lv, zetas, N)
lv <- sim_dat_lv$lv
obs_lv <- sim_dat_lv$obs
# Pass and simulate OL data
X <- data.frame(x1 = rnorm(N), x2 = lv)
betas <- c(beta1 = 1, beta2 = 2)
taus <- c(tau1 = -1, tau2 = 1) # will generate 3 choices
sim_dat_ol <- simulate_ol(X, betas, taus, n)
obs_ol <- sim_dat_ol
sim_dat_ol <- simulate_ol(X, betas, taus, n)
obs_ol <- sim_dat_ol[, names(sim_dat_ol) != "x2"] # x2 is our lv
obs_ol
# What we actually observe
X <- data.frame(
obs_ol,
sobs_lv
)
# What we actually observe
X <- data.frame(
obs_lv,
obs_ol
)
X
devtools::build_rmd("vignettes/ol-lv.Rmd")
devtools::build_rmd("vignettes/ol-lv.Rmd")
devtools::build_rmd("vignettes/ol-lv.Rmd")
rm(list = ls())
N <- 10e3
# Simulate LV
X <- data.frame(x1 = rnorm(N), x2 = rnorm(N))
betas_lv <- c(beta1 = 1, beta2 = 2)
taus_lv <- c(tau1 = -1, tau2 = 1)
zetas <- c(zeta1 = 1, zeta2 = 2)
sim_dat_lv <- DCM::simulate_lv(X, betas_lv, taus_lv, zetas, N)
lv <- sim_dat_lv$lv
obs_lv <- sim_dat_lv$obs
# Pass and simulate OL data
X <- data.frame(x1 = rnorm(N), x2 = lv)
betas <- c(beta1 = 1, beta2 = 2)
taus <- c(tau1 = -1, tau2 = 1) # will generate 3 choices
sim_dat_ol <- simulate_ol(X, betas, taus, N)
obs_ol <- sim_dat_ol[, names(sim_dat_ol) != "x2"] # x2 is our lv
# What we actually observe
X <- data.frame(
obs_lv,
obs_ol
)
names(X) <- c("x1_lv", "x2_lv", "ind1", "ind2", "x1", "choice")
head(X)
devtools::build_rmd("vignettes/ol-lv.Rmd")
devtools::build_rmd("vignettes/ol-lv.Rmd")
devtools::build_rmd("vignettes/ol-lv.Rmd")
devtools::build_rmd("vignettes/ol-lv.Rmd")
devtools::load_all()
devtools::document()
devtools::build_rmd("vignettes/ol-lv.Rmd")
devtools::build_rmd("vignettes/ol-lv.Rmd")
devtools::build_rmd("vignettes/ol-lv.Rmd")
devtools::build_rmd("vignettes/ol-lv.Rmd")
