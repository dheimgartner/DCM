?plogis
rlogis()
rlogis(1)
plogis(rlogis(1))
plogis(0)
plogis(0.1)
plogis(-Inf)
log(0)
loglik <- function(param) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * plogis(P_1n) + y_0n * plogis(P_0n))
cat(ll, "\n")
ll
}
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
m <- maxLik::maxLik(loglik, start = param, method = "BFGS")
summary(m)
log(0)
loglik <- function(param) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_0n <- 1 - P_1n
P_1n <- P_1n + 1
P_0n <- P_0n + 1
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
m <- maxLik::maxLik(loglik, start = param, method = "BFGS")
summary(m)
loglik(param)
param <- c(0, 1, 2)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
param <- c(3, 3, 3)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
debug(loglik)
m <- maxLik::maxLik(loglik, start = param, method = "BFGS")
ll
ll
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_0n <- 1 - P_1n
P_1n <- pmax(pmin(P_1n, 1 - epsilon), epsilon)
P_0n <- pmax(pmin(P_0n, 1 - epsilon), epsilon)
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
param <- c(3, 3, 3)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
param <- c(0, 1, 2)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
m <- maxLik::maxLik(loglik, start = param, method = "BFGS")
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
hessian_function <- function(param) numDeriv::hessian(loglik, param)
m <- maxLik::maxLik(loglik, start = param, method = "BFGS", hess = hessian_function)
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_0n <- 1 - P_1n
P_1n <- P_1n + epsilon
P_0n <- P_0n + epsilon
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
hessian_function <- function(param) numDeriv::hessian(loglik, param)
m <- maxLik::maxLik(loglik, start = param, method = "BFGS", hess = hessian_function)
summary(m)
param <- c(1, 2, 3)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
hessian_function <- function(param) numDeriv::hessian(loglik, param)
m <- maxLik::maxLik(loglik, start = param, method = "BFGS", hess = hessian_function)
loglik_ <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_0n <- 1 - P_1n
P_1n <- P_1n + epsilon
P_0n <- P_0n + epsilon
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
loglik_ <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_0n <- 1 - P_1n
P_1n <- P_1n + epsilon
P_0n <- P_0n + epsilon
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
loglik(param)
m <- maxLik::maxLik(loglik_, start = param, method = "BFGS")
summary(m)
# Simulation (draws matrix) -----------------------------------------------
n_draws <- 1000
n_rows <- nrow(dat)
draws_matrix <- matrix(rlogis(n_draws * n_rows), nrow = n_rows, ncol = n_draws)
draws_matrix
# Simulation (draws matrix) -----------------------------------------------
n_draws <- 1000
n_rows <- nrow(dat)
draws_matrix <- matrix(rlogis(n_draws * n_rows), nrow = n_rows, ncol = n_draws)
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean) + epsilon
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
m <- maxLik::maxLik(loglik, start = param, method = "BFGS")
summary(m)
p <- function(v) {
v <- setNames(param, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
loglik <- function(param) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(param, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
# Simulation (draws matrix) -----------------------------------------------
n_draws <- 1000
n_rows <- nrow(dat)
draws_matrix <- matrix(rlogis(n_draws * n_rows), nrow = n_rows, ncol = n_draws)
loglik <- function(param) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(param, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
draws_matrix
library(plotly)
devtools::load_all()
rm(list = ls())
sim_dat <- simulate_binary()
beta <- sim_dat$beta
dat <- sim_dat$data
# Simulation (draws matrix) -----------------------------------------------
n_draws <- 1000
n_rows <- nrow(dat)
draws_matrix <- matrix(rlogis(n_draws * n_rows), nrow = n_rows, ncol = n_draws)
loglik <- function(param) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(param, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
p <- function(v) {
v <- setNames(v, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean) + epsilon
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(v, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
debugonce(loglik)
loglik(p(c(1, 2, 3)))
table(P_1n)
?pmax
c(0, 1, 2, 3) -> test
pmax(test, 1)
# Simulation (draws matrix) -----------------------------------------------
n_draws <- 1000
n_rows <- nrow(dat)
draws_matrix <- matrix(rlogis(n_draws * n_rows), nrow = n_rows, ncol = n_draws)
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_1n <- pmax(P_1n, epsilon)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(v, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
debugonce(loglik)
test
test <- c(0.1, 0, 1, 0.2)
test
# Simulation (draws matrix) -----------------------------------------------
n_draws <- 1000
n_rows <- nrow(dat)
draws_matrix <- matrix(rlogis(n_draws * n_rows), nrow = n_rows, ncol = n_draws)
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_1n <- pmax(pmin(P_1n, 1 - epsilon), epsilon)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(v, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
loglik(p(c(0, 1, 2)))
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
m <- maxLik::maxLik(loglik, start = param, method = "BFGS")
summary(m)
loglik <- function(param, dm, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_1n <- pmax(pmin(P_1n, 1 - epsilon), epsilon)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
loglik(p(c(0, 0, 0)))
loglik <- function(param, dm, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + dm
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_1n <- pmax(pmin(P_1n, 1 - epsilon), epsilon)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(v, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
m <- maxLik::maxLik(loglik, start = param, method = "BFGS", dm = draws_matrix)
summary(m)
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + dm
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_1n <- pmax(pmin(P_1n, 1 - epsilon), epsilon)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(v, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
loglik(p(c(0, 1, 2)))
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_1n <- pmax(pmin(P_1n, 1 - epsilon), epsilon)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(v, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
loglik(p(c(0, 1, 2)))
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
m <- maxLik::maxLik(loglik, start = param, method = "BFGS")
mixl::estimate()
mixl::estimate
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- param["ASC"] + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_1n <- pmax(pmin(P_1n, 1 - epsilon), epsilon)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(v, c("ASC", "beta1", "beta2"))
v
}
loglik(p(c(0, 0, 0)))
loglik(p(c(1, 1, 1)))
loglik(p(c(1, 2, 3)))
loglik(p(c(0, 1, 2)))
hessian_function <- function(param) numDeriv::hessian(loglik, param)
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
hessian_function <- function(param) numDeriv::hessian(loglik, param)
param <- c(1, 1, 1)
param <- setNames(param, c("ASC", "beta1", "beta2"))
m <- maxLik::maxLik(loglik, start = param, method = "BFGS", hess = hessian_function)
summary(m)
# Simulation (draws matrix) -----------------------------------------------
n_draws <- 1000
n_rows <- nrow(dat)
draws_matrix <- matrix(rlogis(n_draws * n_rows), nrow = n_rows, ncol = n_draws)
loglik <- function(param, epsilon = 1e-10) {
# 1000 x 1
latent <- 0 + param["beta1"] * dat$x1 + param["beta2"] * dat$x2
# 1000 x n_draws
indicator_ <- latent + draws_matrix
indicator <- (indicator_ > 0)
P_1n <- apply(indicator, 1, mean)
P_1n <- pmax(pmin(P_1n, 1 - epsilon), epsilon)
P_0n <- 1 - P_1n
y_1n <- dat$choice
y_0n <- 1 - y_1n
ll <- sum(y_1n * log(P_1n) + y_0n * log(P_0n))
cat(ll, "\n")
ll
}
p <- function(v) {
v <- setNames(v, c("ASC", "beta1", "beta2"))
v
}
param <- c(1, 1)
param <- setNames(param, c("beta1", "beta2"))
m <- maxLik::maxLik(loglik, start = param, method = "BFGS")
summary(m)
