// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// loglik
double loglik(NumericVector param, DataFrame dat, NumericVector I1, NumericVector I2, NumericVector I3, int n);
RcppExport SEXP _heckman_loglik(SEXP paramSEXP, SEXP datSEXP, SEXP I1SEXP, SEXP I2SEXP, SEXP I3SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type param(paramSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type I1(I1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type I3(I3SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik(param, dat, I1, I2, I3, n));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _heckman_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_heckman_loglik", (DL_FUNC) &_heckman_loglik, 6},
    {"_heckman_rcpp_hello_world", (DL_FUNC) &_heckman_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_heckman(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
